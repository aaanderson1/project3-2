{"version":3,"sources":["Token.js","components/Home.js","components/LoginControl/LoginControl.js","components/Login.js","components/MessageView.js","components/Messages.js","components/Main.js","components/Navbar.js","components/Jumbotron.js","components/Blockquote.jsx","components/getDisplayClassName.js","components/Button.jsx","components/generateRandomString.js","components/Tag.jsx","components/Form.jsx","components/services/QuoteService.js","components/Quote.js","components/quote.js","components/InspirationModal.js","components/App.js","index.js","assets/images/emojis sync /^/.*/.png$","assets/images/emojis/grinning.png","assets/images/emojis/neutral.png","assets/images/emojis/rolling.png","assets/images/emojis/slightly.png","assets/images/emojis/sunglasses.png","assets/images/emojis/thinking.png"],"names":["Token","tokenName","arguments","length","undefined","Object","classCallCheck","this","token","loadToken","tokenString","window","localStorage","getItem","JSON","parse","dateTimeString","dateTime","Date","newDate","setMinutes","getMinutes","setItem","stringify","toISOString","Home","_this","fetch","concat","location","origin","toString","then","response","json","data","_id","console","log","props","history","push","react_default","a","createElement","React","Component","avatars","LoginControl","possibleConstructorReturn","getPrototypeOf","call","state","avatar","Math","floor","random","login","bind","assertThisInitialized","onComplete","_this2","method","body","headers","Content-Type","saveToken","catch","err","_this3","image","require","Image","src","roundedCircle","es_Button","variant","onClick","Login","LoginControl_LoginControl","MessageView","message","mood","Card","Body","owned","deleteCallback","Message","messages","anon","loading","getMessages","setState","setInterval","_this4","reverse","e","_this5","charCode","target","value","id","_this6","_this7","Spinner","animation","lib","className","m","s","l","header","actions","InputGroup","onKeyPress","handleKeyPress","Prepend","Text","FormControl","aria-label","aria-describedby","placeholder","map","MessageView_MessageView","deleteMessage","Main","react_router_dom","react_router","exact","path","component","Messages","Navbarrender","brand","alignLinks","height","width","href","class","Parallaxrender","Blockquote","author","children","getDisplayClassName","color","transformedColor","colorClassName","Button","buttonClasses","rest","objectWithoutProperties","buttonDisplayClassName","assign","classnames","defaultProps","generateRandomString","substring","Tag","inputName","isChecked","tagClasses","text","checkboxId","tagDisplayClassName","type","name","checked","htmlFor","Form","submitButtonColor","submitButtonText","submitButtonVariant","tagColor","tags","tagVariant","src_components_Button","tag","tagInputName","replace","src_components_Tag","key","QuoteService","selectedTags","quotesData","filteredQuotes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","quote","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","indexOf","return","quoteArrayLength","uniqueTags","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Quote","getFormDataObject","formData","keys","get","handleReset","currentQuote","handleSubmit","event","preventDefault","FormData","getQuotesBySelectedTags","randomQuote","getRandomQuoteIndex","getUniqueTags","sort","_this$state","Fragment","src_components_Form","onSubmit","src_components_Blockquote","index","Modal","options","onOpenStart","onOpenEnd","onCloseStart","onCloseEnd","inDuration","outDuration","opacity","dismissible","startingTop","endingTop","M","init","data-target","ref","src_components_quote","App","components_Navbar","components_Jumbotron","components_InspirationModal","components_Main","render","components_App","document","getElementById","./grinning.png","./neutral.png","./rolling.png","./slightly.png","./sunglasses.png","./thinking.png","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","resolve","module","exports","p"],"mappings":"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","file":"static/js/main.0b31211d.chunk.js","sourcesContent":["export default class Token {\n    constructor(tokenName = \"shower_though_secret\") {\n        this.tokenName = tokenName;\n        this.token = null;\n        this.loadToken();\n    }\n\n    loadToken() {\n        const tokenString = window.localStorage.getItem(this.tokenName);\n        if (!!tokenString) {\n            const token = JSON.parse(tokenString);\n            if (token.token && token.dateTimeString) {\n                const dateTime = new Date(token.dateTimeString);\n                if (new Date() < dateTime) {\n                    if (!!token.token) {\n                        this.token = token.token;\n                    }\n                }\n            }\n        }\n    }\n\n    saveToken(token) {\n        this.token = token;\n        const newDate = new Date();\n        newDate.setMinutes(newDate.getMinutes() + 60);\n        window.localStorage.setItem(this.tokenName, JSON.stringify({\n            token: this.token,\n            dateTimeString: newDate.toISOString()\n        }));\n    }\n}","import React from 'react';\nimport Token from '../Token';\nimport \"./Home.css\";\n\n// Home checks if your token is valid and forwards to messages page or login if your token is no longer valid.\nexport default class Home extends React.Component {\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token === null)\n        {\n            this.props.history.push(\"login\");\n            return;\n        }\n\n        fetch(`${window.location.origin.toString()}/api/anon/${token.token}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.length > 0 && data[0]._id === token.token) {\n                console.log(data);\n                this.props.history.push(\"messages\");\n            } else {\n                this.props.history.push(\"login\");\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Token from '../../Token';\nimport { Button, Image } from 'react-bootstrap';\n\nconst avatars = [\"grinning\", \"neutral\", \"rolling\", \"slightly\", \"sunglasses\", \"thinking\"];\n\nexport default class LoginControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            avatar: avatars[Math.floor(Math.random() * avatars.length)]\n        };\n\n        this.login = this.login.bind(this);\n    }\n\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token !== null)\n        {\n            this.props.onComplete();\n            return;\n        }\n    }\n\n    login() {\n        return fetch(`${window.location.origin.toString()}/api/anon`, {\n            method: 'POST',\n            body: JSON.stringify(this.state),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n            const token = new Token();\n            token.saveToken(data._id);\n            this.props.onComplete();\n        }).catch(err => {\n            this.props.onComplete(err);\n        });\n    }\n\n    render() {\n        const image = require(`../../assets/images/emojis/${this.state.avatar}.png`);\n        return (\n            <div>\n                <Image src={image} roundedCircle />\n                <Button variant=\"outline-primary\" onClick={() => this.login()}>Login</Button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Token from '../Token';\nimport LoginControl from './LoginControl/LoginControl';\n\nexport default class Login extends React.Component {\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token !== null)\n        {\n            this.props.history.push(\"/\");\n            return;\n        }\n    }\n\n    onComplete(err) {\n        if (err)\n        {\n            console.log(err);\n            const token = new Token();\n            token.saveToken(null);\n        }\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n        return (\n            <div>\n                <LoginControl\n                    onComplete={this.onComplete.bind(this)}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Button, Image, Card } from 'react-bootstrap';\n\n\nexport default class MessageView extends React.Component {\n    render() {\n        const image = require(`../assets/images/emojis/${this.props.message.mood}.png`);\n        return (\n            <div>\n                <Card>\n                    <Card.Body>\n                        <Image src={image} roundedCircle />{this.props.message.message}\n                        {this.props.owned &&\n                            <Button variant=\"outline-primary\" onClick={() => this.props.deleteCallback(this.props.message._id)}>X</Button>\n                        }\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Token from '../Token';\nimport MessageView from './MessageView';\nimport { Image, InputGroup, FormControl, Spinner } from 'react-bootstrap';\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { Card, Row, Col, CardTitle, Parallax, Section} from \"react-materialize\";\nimport \"./Messages.css\";\n\n\nexport default class Message extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            anon: {\n                _id: \"???????\",\n                avatar: \"haha\"\n            },\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token === null)\n        {\n            this.props.history.push(\"/\");\n            return;\n        }\n        this.login(token.token).then(() => this.getMessages());\n        //set interval\n    }\n\n    login(token) {\n        return fetch(`${window.location.origin.toString()}/api/anon/${token}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.length > 0 && data[0]._id === token) {\n                console.log(data);\n                this.setState({\n                    anon: data[0]\n                });\n                setInterval(function(){ this.getMessages(); }.bind(this), 3000);\n            } else {\n                const token = new Token();\n                token.saveToken(null);\n                this.props.history.push(\"/\");\n            }\n        }).catch(err => {\n            const token = new Token();\n            token.saveToken(null);\n            this.props.history.push(\"/\");\n        });\n    }\n\n    getMessages() {\n        return fetch(`${window.location.origin.toString()}/api/messages`)\n        .then(response => response.json())\n        .then(data => {\n            data = data.reverse();\n            console.log(data);\n            this.setState({\n                anon: this.state.anon,\n                messages: data,\n                loading: false\n            });\n        });\n    }\n\n    handleKeyPress(e) {\n        if (e.charCode !== 13) {\n            return;\n        }\n        const message = e.target.value;\n        e.target.value = \"\";\n        console.log(message);\n        return fetch(`${window.location.origin.toString()}/api/message`, {\n            method: 'POST',\n            body: JSON.stringify({\n                message: message,\n                anon: this.state.anon._id,\n                mood: this.state.anon.avatar\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            this.getMessages();\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    deleteMessage(id) {\n        return fetch(`${window.location.origin.toString()}/api/message/${id}/${this.state.anon._id}`, {\n            method: 'DELETE'\n        })\n        .then(response => response.json())\n        .then(data => {\n            this.getMessages();\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div>\n                <Spinner animation=\"grow\" variant=\"primary\" />\n                <Spinner animation=\"grow\" variant=\"secondary\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"info\" />\n                <Spinner animation=\"grow\" variant=\"light\" />\n                <Spinner animation=\"grow\" variant=\"dark\" />\n                </div>\n            );\n        }\n\n          \n        \n\n        const image = require(`../assets/images/emojis/${this.state.anon.avatar}.png`);\n        return (\n\n            <Row className=\"messagesTopRow\">\n                <Col m={12} s={12} l={12}>\n                <Card header={<CardTitle />} actions={[<a />]}>\n                        <Image src={image} roundedCircle />\n\n                                    \n                        <InputGroup onKeyPress={this.handleKeyPress.bind(this)} className=\"mb-3\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text id=\"inputGroup-sizing-default\">\n                            What's on your mind?\n                            </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                            aria-label=\"Default\"\n                            aria-describedby=\"inputGroup-sizing-default\" placeholder=\" press enter to save\"\n                            />\n                        </InputGroup>\n                    \n                </Card>\n                </Col>\n                \n                <Col m={12} s={12} l={12}>\n                {this.state.messages.map(message =>\n                    <MessageView message={message} deleteCallback={this.deleteMessage.bind(this)} owned={this.state.anon._id === message.anon} />\n                )}\n                </Col>\n                </Row>\n            \n        );\n    }\n}\n","import React from 'react'\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\nimport Home from './Home'\nimport Login from './Login'\nimport Messages from './Messages'\n\nconst Main = () => (\n  <main>\n    <BrowserRouter>\n    <Switch>\n      <Route exact path='/' component={Home}/>\n      <Route path='/login' component={Login}/>\n      <Route path='/messages' component={Messages}/>\n    </Switch>\n    </BrowserRouter>\n  </main>\n)\n\nexport default Main\n","//sets up the reusable Navbar component\nimport \"./Navbar.css\";\nimport React from \"react\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { Navbar, NavItem } from \"react-materialize\";\n\n\n\nfunction Navbarrender() {\n  return (\n<Navbar brand={<a />} alignLinks=\"right\" className=\"navbarcolor\">\n  <img src=\"https://i.pinimg.com/originals/20/c7/bc/20c7bcfe40f464961ed209e3deadf8b6.png\" className=\"navbarlogo\" height=\"100px\" width=\"100px\"></img>\n<NavItem href=\"components.html\" class=\"white-text\">\nLog Out\n</NavItem>\n</Navbar>\n  );\n}\n\nexport default Navbarrender;\n\n\n\n\n","/* eslint-disable no-undef */\n/* eslint-disable jsx-a11y/alt-text */\nimport \"./Jumbotron.css\";\nimport React from \"react\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { Section, Button, Modal, trigger} from \"react-materialize\";\n\n\n\nfunction Parallaxrender() {\n\treturn (\n\n  <Section>\n\n  <Section className=\"parallax\">\n    <h1 className=\"title\">Shower Thoughts</h1>\n    </Section>\n  \n \n  </Section>\n\n\t)\n  }\n\nexport default Parallaxrender;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Blockquote.css';\n\n/**\n * Appears as a raised card with the content of a given quote as\n * well as the quote's author\n */\nconst Blockquote = props => {\n    const { author, children } = props;\n    return (\n        <div className=\"Blockquote\">\n            <blockquote className=\"Blockquote__quotation\">\n                {children}\n            </blockquote>\n            <span className=\"Blockquote__author\">&mdash; {author}</span>\n        </div>\n    );\n};\n\nexport default Blockquote;\n\nBlockquote.propTypes = {\n    /** Author of the quote inserted with the `children` prop */\n    author: PropTypes.string.isRequired,\n    /** Content for the blockquote */\n    children: PropTypes.any.isRequired,\n};\n","/**\n * Get a CSS class based on the name of the component and the desired\n * color/variant. Uses BEM naming convention.\n *\n * @param {string} component Name of the component for the modifiers\n * @param {string} color Lowercase string for the color modifier\n * @param {string} variant Lowercase string for the variant modifier, is added to the end of the color modifier\n */\nconst getDisplayClassName = (component, color, variant) => {\n    const transformedColor = color === 'default' ? 'grey' : color;\n    const colorClassName = `${component}--${transformedColor}`;\n\n    if (variant && variant !== 'default') return `${colorClassName}--${variant}`;\n    return colorClassName;\n};\n\nexport default getDisplayClassName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport getDisplayClassName from './getDisplayClassName';\nimport './Button.css';\n\n/**\n * Button that uses the HTML `<button>` element as its base. Allows for a \n * color and variant from a set list to be provided.\n */\nconst Button = props => {\n    const { buttonClasses, children, color, variant, ...rest } = props;\n    const buttonDisplayClassName = getDisplayClassName('Button', color, variant); // Get CSS class for color and variant of the button\n\n    return (\n        <button className={classnames('Button', buttonDisplayClassName, buttonClasses)} {...rest}>\n            <span className=\"Button__label\">{children}</span>\n        </button>\n    );\n};\n\nexport default Button;\n\nButton.propTypes = {\n    /** Extra CSS classes to attach to the HTML `<button>` */\n    buttonClasses: PropTypes.string,\n    /** Content for the button */\n    children: PropTypes.any.isRequired,\n    /** Different colors for a button */\n    color: PropTypes.oneOf(['default', 'primary']),\n    /** Different variations of a given color scheme for a button */\n    variant: PropTypes.oneOf(['default', 'contained']),\n};\n\nButton.defaultProps = {\n    buttonClasses: '',\n    color: 'default',\n    variant: 'default',\n};\n","/**\n * Generate a random string of alphanumeric characters that\n * can be used as part of a unique key or id\n *\n * @author Xuejia Chen <570171025@qq.com>\n *\n * @see {@link https://gist.github.com/6174/6062387} for original answer\n */\nconst generateRandomString = () => {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n\nexport default generateRandomString;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport generateRandomString from './generateRandomString';\nimport getDisplayClassName from './getDisplayClassName';\nimport './Tag.css';\n\n/**\n * Represents an attribute a quote can be labelled with. Allows for a \n * color and variant from a set list to be provided.\n */\nconst Tag = props => {\n    const { color, inputName, isChecked, tagClasses, text, variant } = props;\n    const checkboxId = `${inputName}_${generateRandomString()}`;\n    const tagDisplayClassName = getDisplayClassName('Tag', color, variant); // Get CSS class for color and variant of the tag\n\n    return (\n        <div className={classnames('Tag', tagDisplayClassName, tagClasses)}>\n            {isChecked ?\n            <input className=\"Tag__checkbox\" type=\"checkbox\" name={inputName} id={checkboxId} checked />\n            :\n            <input className=\"Tag__checkbox\" type=\"checkbox\" name={inputName} id={checkboxId} />}\n            <label className=\"Tag__button\" htmlFor={checkboxId}>\n                <span className=\"Tag__text\">\n                    {text}\n                </span>\n            </label>\n        </div>\n    );\n};\n\nexport default Tag;\n\nTag.propTypes = {\n    /** Color options for a tag */\n    color: PropTypes.oneOf(['default']),\n    /**\n     * Name for the checkbox HTML `<input />`, also used as part of an ID\n     * for the checkbox HTML `<input />`\n     */\n    inputName: PropTypes.string.isRequired,\n    /** Determines whether the checkbox is checked on page load */\n    isChecked: PropTypes.bool,\n    /** Extra CSS classes to attach to the containing HTML `<div>` */\n    tagClasses: PropTypes.string,\n    /** User-facing text for the tag */\n    text: PropTypes.string.isRequired,\n    /** Different variations of a given color scheme for a tag */\n    variant: PropTypes.oneOf(['default', 'outline']),\n};\n\nTag.defaultProps = {\n    color: 'default',\n    isChecked: false,\n    tagClasses: '',\n    variant: 'default',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport Tag from './Tag';\nimport generateRandomString from './generateRandomString';\nimport './Form.css';\n\n/**\n * Form that provides interface for users to generate quotes and/or filter quotes to\n * generate by tag.\n */\nconst Form = props => {\n    const {\n        submitButtonColor,\n        submitButtonText,\n        submitButtonVariant,\n        tagColor,\n        tags,\n        tagVariant,\n        ...rest } = props;\n\n    return (\n        <form {...rest}>\n            <Button\n                color={submitButtonColor}\n                type=\"submit\"\n                variant={submitButtonVariant}\n            >\n                {submitButtonText}\n            </Button>\n            {tags.length > 0 ?\n            <div className=\"Form__inline-input-container\">\n                {tags.map((tag) => {\n                    const tagInputName = tag.replace(/\\s/g, ''); // Eliminate any spaces within the tag label\n                    return (\n                        <Tag\n                            color={tagColor}\n                            inputName={tagInputName}\n                            key={`tag_${generateRandomString()}`}\n                            tagClasses=\"Form__inline-input-container__input\"\n                            text={tag}\n                            variant={tagVariant}\n                        />\n                    );\n                })}\n            </div> : ''\n            }\n        </form>\n    );\n};\n\nexport default Form;\n\nForm.propTypes = {\n    /** \n     * Color of the submit button. \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Button.jsx`\n     */\n    submitButtonColor: PropTypes.string,\n    /** Text for the submit button */\n    submitButtonText: PropTypes.string,\n    /** \n     * Variant of the submit button. \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Button.jsx`\n     */\n    submitButtonVariant: PropTypes.string,\n    /** \n     * Color for each tag (available when the `tags` prop has at least one value). \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Tag.jsx`\n     */\n    tagColor: PropTypes.string,\n    /** Array of tag labels */\n    tags: PropTypes.arrayOf(PropTypes.string),\n    /** \n     * Variant for each tag (available when the `tags` prop has at least one value). \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Tag.jsx`\n     */\n    tagVariant: PropTypes.string,\n};\n\nForm.defaultProps = {\n    submitButtonColor: 'default',\n    submitButtonText: 'Submit',\n    submitButtonVariant: 'default',\n    tagColor: 'default',\n    tags: [],\n    tagVariant: 'default',\n};\n","import quotesData from '../data/quotes.json';\n\n/**\n * @classdesc Class with static methods for retrieving quotes, quote data, and tags.\n */\nclass QuoteService {\n    /**\n     * Filter for quotes labelled with tags selected by the user. Returns\n     * an array of quotes that contain at least one tag from the\n     * `selectedTags` array.\n     *\n     * @param {string[]} selectedTags List of tags selected by the user\n     */\n    static getQuotesBySelectedTags(selectedTags) {\n        if (selectedTags.length < 1) return quotesData; // Only filter results if any tags were selected\n\n        const filteredQuotes = [];\n\n        for (const quote of quotesData) {\n            for (const tag of quote.tags) {\n                if (selectedTags.indexOf(tag) > -1) { // Check if this tag matches one of the tags selected by the user\n                    filteredQuotes.push(quote); // If it does, push the `quote` into `filteredQuotes`\n                    break; // End the loop so the quote isn't added more than once\n                }\n            }\n        }\n\n        return filteredQuotes;\n    }\n\n    /**\n     * Returns a random number between `0` and the number of quotes to be picked from\n     * @param {number} quoteArrayLength Number of quotes that can be randomly picked from\n     */\n    static getRandomQuoteIndex(quoteArrayLength) {\n        return Math.floor(Math.random() * Math.floor(quoteArrayLength));\n    }\n\n    /**\n     * Returns an array of each unique instance of a tag from the source data\n     */\n    static getUniqueTags() {\n        const uniqueTags = [];\n\n        for (const quote of quotesData) {\n            for (const tag of quote.tags) {\n                if (uniqueTags.indexOf(tag) === -1) uniqueTags.push(tag); // Push tag into array if it isn't there already\n            }\n        }\n\n        return uniqueTags;\n    }\n}\n\nexport default QuoteService;\n","import React, { Component } from 'react';\r\nimport Blockquote from './Blockquote';\r\nimport Button from './Button';\r\nimport Form from './Form';\r\nimport QuoteService from './services/QuoteService';\r\nimport './quote.css';\r\n\r\nclass Quote extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentQuote: null,\r\n      tags: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ tags: QuoteService.getUniqueTags().sort() }); // Get the tags for the user to pick from, sorted alphabetically\r\n  }\r\n\r\n  /**\r\n   * Returns the submitted `formData` as an object\r\n   */\r\n  getFormDataObject = formData => {\r\n    const data = {};\r\n    for (const key of formData.keys()) {\r\n      data[key] = formData.get(key);\r\n    }\r\n    return data;\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      currentQuote: null,\r\n    });\r\n  };\r\n  \r\n  handleSubmit = event => {\r\n    event.preventDefault(); // Prevent page from reloading\r\n    const data = this.getFormDataObject(new FormData(event.target));\r\n    const selectedTags = Object.keys(data);\r\n    const filteredQuotes = QuoteService.getQuotesBySelectedTags(selectedTags);\r\n    // Is either the single quote in `filteredQuotes` or a random quote if the length of `filteredQuotes` is larger than `1`\r\n    let randomQuote = filteredQuotes.length === 1 ? filteredQuotes[0] : filteredQuotes[QuoteService.getRandomQuoteIndex(filteredQuotes.length)];\r\n\r\n    this.setState({\r\n      currentQuote: {\r\n        author: randomQuote.author.name,\r\n        tags: randomQuote.tags,\r\n        text: randomQuote.text,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { currentQuote, tags } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {!currentQuote ?\r\n        <Form\r\n          className=\"container\"\r\n          onSubmit={this.handleSubmit}\r\n          submitButtonColor=\"primary\"\r\n          submitButtonText=\"Generate quote\"\r\n          submitButtonVariant=\"contained\"\r\n          tags={tags}\r\n          tagVariant=\"outline\"\r\n        /> : ''}\r\n        {currentQuote ?\r\n        <div className=\"container\">\r\n          <Button\r\n            buttonClasses=\"margin-bottom--sm\"\r\n            color=\"primary\"\r\n            onClick={this.handleReset}\r\n            type=\"reset\"\r\n          >\r\n            <span className=\"icon--lg margin-right--xs\">\r\n              &laquo;\r\n            </span>\r\n            Generate another\r\n          </Button>\r\n          <Blockquote author={currentQuote.author}>\r\n              {currentQuote.text}\r\n          </Blockquote>\r\n          {currentQuote.tags && currentQuote.tags.length > 0 ?\r\n          <React.Fragment>\r\n            <small className=\"color--grey font-size--sm margin-top--sm\">Tags for this quote:\r\n              {currentQuote.tags.map((tag, index) => {\r\n                // List tags for this quote, insert comma after each if not the last tag\r\n                return ` \"${tag}${(index + 1) !== currentQuote.tags.length ? '\", ' : '\"'}`;\r\n              })}\r\n            </small>\r\n          </React.Fragment> : ''}\r\n        </div> : ''}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from 'react';\r\nimport Blockquote from './Blockquote';\r\nimport Button from './Button';\r\nimport Form from './Form';\r\nimport QuoteService from './services/QuoteService';\r\nimport './quote.css';\r\n\r\nclass Quote extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentQuote: null,\r\n      tags: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ tags: QuoteService.getUniqueTags().sort() }); // Get the tags for the user to pick from, sorted alphabetically\r\n  }\r\n\r\n  /**\r\n   * Returns the submitted `formData` as an object\r\n   */\r\n  getFormDataObject = formData => {\r\n    const data = {};\r\n    for (const key of formData.keys()) {\r\n      data[key] = formData.get(key);\r\n    }\r\n    return data;\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      currentQuote: null,\r\n    });\r\n  };\r\n  \r\n  handleSubmit = event => {\r\n    event.preventDefault(); // Prevent page from reloading\r\n    const data = this.getFormDataObject(new FormData(event.target));\r\n    const selectedTags = Object.keys(data);\r\n    const filteredQuotes = QuoteService.getQuotesBySelectedTags(selectedTags);\r\n    // Is either the single quote in `filteredQuotes` or a random quote if the length of `filteredQuotes` is larger than `1`\r\n    let randomQuote = filteredQuotes.length === 1 ? filteredQuotes[0] : filteredQuotes[QuoteService.getRandomQuoteIndex(filteredQuotes.length)];\r\n\r\n    this.setState({\r\n      currentQuote: {\r\n        author: randomQuote.author.name,\r\n        tags: randomQuote.tags,\r\n        text: randomQuote.text,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { currentQuote, tags } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {!currentQuote ?\r\n        <Form\r\n          className=\"container\"\r\n          onSubmit={this.handleSubmit}\r\n          submitButtonColor=\"primary\"\r\n          submitButtonText=\"Generate quote\"\r\n          submitButtonVariant=\"contained\"\r\n          tags={tags}\r\n          tagVariant=\"outline\"\r\n        /> : ''}\r\n        {currentQuote ?\r\n        <div className=\"container\">\r\n          <Button\r\n            buttonClasses=\"margin-bottom--sm\"\r\n            color=\"primary\"\r\n            onClick={this.handleReset}\r\n            type=\"reset\"\r\n          >\r\n            <span className=\"icon--lg margin-right--xs\">\r\n              &laquo;\r\n            </span>\r\n            Generate another\r\n          </Button>\r\n          <Blockquote author={currentQuote.author}>\r\n              {currentQuote.text}\r\n          </Blockquote>\r\n          {currentQuote.tags && currentQuote.tags.length > 0 ?\r\n          <React.Fragment>\r\n            <small className=\"color--grey font-size--sm margin-top--sm\">Tags for this quote:\r\n              {currentQuote.tags.map((tag, index) => {\r\n                // List tags for this quote, insert comma after each if not the last tag\r\n                return ` \"${tag}${(index + 1) !== currentQuote.tags.length ? '\", ' : '\"'}`;\r\n              })}\r\n            </small>\r\n          </React.Fragment> : ''}\r\n        </div> : ''}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from \"react\";\nimport M from \"materialize-css\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport \"./InspirationModal.css\";\nimport Quote from './quote';\n\n\nclass Modal extends Component {\n  componentDidMount() {\n    const options = {\n      onOpenStart: () => {\n        console.log(\"Open Start\");\n      },\n      onOpenEnd: () => {\n        console.log(\"Open End\");\n      },\n      onCloseStart: () => {\n        console.log(\"Close Start\");\n      },\n      onCloseEnd: () => {\n        console.log(\"Close End\");\n      },\n      inDuration: 250,\n      outDuration: 250,\n      opacity: 0.5,\n      dismissible: false,\n      startingTop: \"4%\",\n      endingTop: \"10%\"\n    };\n    M.Modal.init(this.Modal, options);\n    // If you want to work on instance of the Modal then you can use the below code snippet \n    // let instance = M.Modal.getInstance(this.Modal);\n    // instance.open();\n    // instance.close();\n    // instance.destroy();\n  }\n\n  render() {\n    return (\n      <>\n        <a\n          className=\"waves-effect waves-light btn modal-trigger inspirationModalBTN\"\n          data-target=\"modal1\"\n        >\n          NEED INSPIRATION?\n        </a>\n\n        <div\n          ref={Modal => {\n            this.Modal = Modal;\n          }}\n          id=\"modal1\"\n          className=\"modal\"\n        >\n          {/* If you want Bottom Sheet Modal then add \n        bottom-sheet class */}\n          <div className=\"modal-content\">\n            <h4>Generate a Quote Below!</h4>\n            <Quote />\n          </div>\n          <div class=\"modal-footer\">\n            <a href=\"#\" class=\"modal-close waves-effect waves-red btn-flat\">\n              Close\n            </a>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Modal;","import React from 'react'\nimport Main from './Main'\nimport Navbar from \"./Navbar\"\nimport Jumbotron from \"./Jumbotron\"\nimport Quote from './Quote'\nimport InspirationModal from './InspirationModal'\n\n\nconst App = () => (\n  <div>\n    <Navbar\n        />\n    <Jumbotron\n        />\n    <InspirationModal\n        />\n    <Main />\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App';\n\nrender((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));","var map = {\n\t\"./grinning.png\": 52,\n\t\"./neutral.png\": 53,\n\t\"./rolling.png\": 54,\n\t\"./slightly.png\": 55,\n\t\"./sunglasses.png\": 56,\n\t\"./thinking.png\": 57\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 28;","module.exports = __webpack_public_path__ + \"static/media/grinning.a5c4c868.png\";","module.exports = __webpack_public_path__ + \"static/media/neutral.a7fe3123.png\";","module.exports = __webpack_public_path__ + \"static/media/rolling.8d0d9682.png\";","module.exports = __webpack_public_path__ + \"static/media/slightly.f8af4936.png\";","module.exports = __webpack_public_path__ + \"static/media/sunglasses.4238fe56.png\";","module.exports = __webpack_public_path__ + \"static/media/thinking.872be34d.png\";"],"sourceRoot":""}