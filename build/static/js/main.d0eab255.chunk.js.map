{"version":3,"sources":["Token.js","components/Home.js","components/LoginControl/LoginControl.js","components/Login.js","components/MessageView.js","adapter/api.js","components/validations.js","components/emoji.js","components/Messages.js","components/Main.js","components/Navbar.js","components/Jumbotron.js","components/Blockquote.jsx","components/getDisplayClassName.js","components/Button.jsx","components/generateRandomString.js","components/Tag.jsx","components/Form.jsx","components/services/QuoteService.js","components/quote.js","components/InspirationModal.js","components/App.js","index.js","assets/images/emojis sync /^/.*/.png$","assets/images/emojis/grinning.png","assets/images/emojis/neutral.png","assets/images/emojis/rolling.png","assets/images/emojis/slightly.png","assets/images/emojis/sunglasses.png","assets/images/emojis/thinking.png"],"names":["Token","tokenName","arguments","length","undefined","Object","classCallCheck","this","token","loadToken","tokenString","window","localStorage","getItem","JSON","parse","dateTimeString","dateTime","Date","newDate","setMinutes","getMinutes","setItem","stringify","toISOString","Home","_this","fetch","concat","location","origin","toString","then","response","json","data","_id","console","log","props","history","push","react_default","a","createElement","React","Component","avatars","LoginControl","possibleConstructorReturn","getPrototypeOf","call","state","avatar","Math","floor","random","login","bind","assertThisInitialized","onComplete","_this2","method","body","headers","Content-Type","saveToken","catch","err","_this3","image","require","Image","src","roundedCircle","es_Button","variant","onClick","Login","LoginControl_LoginControl","MessageView","message","mood","Card","Body","owned","deleteCallback","API_ROOT","hostname","getToken","postMessage","messageObj","Accept","Authorization","validations","input","errors","Emoji","text","conversation_id","user_id","showEmojis","e","setState","document","addEventListener","closeMenu","emojiPicker","contains","target","removeEventListener","componentWillReceiveProps","nextProps","handleChange","validation","validate","value","handleSubmit","preventDefault","addEmoji","emoji","native","map","className","onSubmit","style","styles","type","onChange","placeholder","color","ref","el","dist_es","onSelect","emojiTooltip","title","getEmojiButton","String","fromCodePoint","container","padding","borderTop","marginBottom","form","display","background","outline","border","flex","fontSize","cssFloat","margin","cursor","position","bottom","right","marginLeft","Message","messages","anon","loading","getMessages","setInterval","_this4","reverse","_this5","charCode","id","_this6","_this7","Spinner","animation","lib","m","s","l","header","actions","InputGroup","onKeyPress","handleKeyPress","Text","components_emoji","MessageView_MessageView","deleteMessage","Main","react_router_dom","react_router","exact","path","component","Messages","Navbarrender","brand","alignLinks","height","width","href","class","Parallaxrender","Blockquote","author","children","getDisplayClassName","transformedColor","colorClassName","Button","buttonClasses","rest","objectWithoutProperties","buttonDisplayClassName","assign","classnames","defaultProps","generateRandomString","substring","Tag","inputName","isChecked","tagClasses","checkboxId","tagDisplayClassName","name","checked","htmlFor","Form","submitButtonColor","submitButtonText","submitButtonVariant","tagColor","tags","tagVariant","src_components_Button","tag","tagInputName","replace","src_components_Tag","key","QuoteService","selectedTags","quotesData","filteredQuotes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","quote","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","indexOf","return","quoteArrayLength","uniqueTags","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Quote","getFormDataObject","formData","keys","get","handleReset","currentQuote","event","FormData","getQuotesBySelectedTags","randomQuote","getRandomQuoteIndex","getUniqueTags","sort","_this$state","Fragment","src_components_Form","src_components_Blockquote","index","Modal","options","onOpenStart","onOpenEnd","onCloseStart","onCloseEnd","inDuration","outDuration","opacity","dismissible","startingTop","endingTop","M","init","data-target","src_components_quote","App","Navbar","components_Jumbotron","components_InspirationModal","components_Main","render","components_App","getElementById","./grinning.png","./neutral.png","./rolling.png","./slightly.png","./sunglasses.png","./thinking.png","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","resolve","module","exports","p"],"mappings":"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","file":"static/js/main.d0eab255.chunk.js","sourcesContent":["export default class Token {\n    constructor(tokenName = \"shower_though_secret\") {\n        this.tokenName = tokenName;\n        this.token = null;\n        this.loadToken();\n    }\n\n    loadToken() {\n        const tokenString = window.localStorage.getItem(this.tokenName);\n        if (!!tokenString) {\n            const token = JSON.parse(tokenString);\n            if (token.token && token.dateTimeString) {\n                const dateTime = new Date(token.dateTimeString);\n                if (new Date() < dateTime) {\n                    if (!!token.token) {\n                        this.token = token.token;\n                    }\n                }\n            }\n        }\n    }\n\n    saveToken(token) {\n        this.token = token;\n        const newDate = new Date();\n        newDate.setMinutes(newDate.getMinutes() + 60);\n        window.localStorage.setItem(this.tokenName, JSON.stringify({\n            token: this.token,\n            dateTimeString: newDate.toISOString()\n        }));\n    }\n}","import React from 'react';\nimport Token from '../Token';\nimport \"./Home.css\";\n\n// Home checks if your token is valid and forwards to messages page or login if your token is no longer valid.\nexport default class Home extends React.Component {\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token === null)\n        {\n            this.props.history.push(\"login\");\n            return;\n        }\n\n        fetch(`${window.location.origin.toString()}/api/anon/${token.token}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.length > 0 && data[0]._id === token.token) {\n                console.log(data);\n                this.props.history.push(\"messages\");\n            } else {\n                this.props.history.push(\"login\");\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Token from '../../Token';\nimport { Button, Image } from 'react-bootstrap';\n\nconst avatars = [\"grinning\", \"neutral\", \"rolling\", \"slightly\", \"sunglasses\", \"thinking\"];\n\nexport default class LoginControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            avatar: avatars[Math.floor(Math.random() * avatars.length)]\n        };\n\n        this.login = this.login.bind(this);\n    }\n\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token !== null)\n        {\n            this.props.onComplete();\n            return;\n        }\n    }\n\n    login() {\n        return fetch(`${window.location.origin.toString()}/api/anon`, {\n            method: 'POST',\n            body: JSON.stringify(this.state),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data);\n            const token = new Token();\n            token.saveToken(data._id);\n            this.props.onComplete();\n        }).catch(err => {\n            this.props.onComplete(err);\n        });\n    }\n\n    render() {\n        const image = require(`../../assets/images/emojis/${this.state.avatar}.png`);\n        return (\n            <div>\n                <Image src={image} roundedCircle />\n                <Button variant=\"outline-primary\" onClick={() => this.login()}>Login</Button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Token from '../Token';\nimport LoginControl from './LoginControl/LoginControl';\n\nexport default class Login extends React.Component {\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token !== null)\n        {\n            this.props.history.push(\"/\");\n            return;\n        }\n    }\n\n    onComplete(err) {\n        if (err)\n        {\n            console.log(err);\n            const token = new Token();\n            token.saveToken(null);\n        }\n        this.props.history.push(\"/\");\n    }\n\n    render() {\n        return (\n            <div>\n                <LoginControl\n                    onComplete={this.onComplete.bind(this)}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Button, Image, Card } from 'react-bootstrap';\n\n\nexport default class MessageView extends React.Component {\n    render() {\n        const image = require(`../assets/images/emojis/${this.props.message.mood}.png`);\n        return (\n            <div>\n                <Card>\n                    <Card.Body>\n                        <Image src={image} roundedCircle />{this.props.message.message}\n                        {this.props.owned &&\n                            <Button variant=\"outline-primary\" onClick={() => this.props.deleteCallback(this.props.message._id)}>X</Button>\n                        }\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}","export const API_WS_ROOT = `ws://${window.location.hostname}:3000/cable`;\r\n\r\nconst API_ROOT = `http://${window.location.hostname}:3000`;   //can connect on IP address\r\nconst HEADERS = {\r\n  'Content-Type': 'application/json',\r\n  'Accept': 'application/json',\r\n}\r\n\r\nconst getToken = () => localStorage.getItem('token');\r\n\r\nexport const getConversations = (id, token) => {\r\n  return fetch(`${API_ROOT}/${id}/conversations`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Authorization': getToken()\r\n    }\r\n  }).then(res => res.json())\r\n}\r\n\r\nexport const getAllConversations = () => {\r\n  return fetch(`${API_ROOT}/conversations`)\r\n    .then(res => res.json())\r\n}\r\n\r\nexport const subscribeUser = (conversation_id, user_id, token) => {\r\n  return fetch(`${API_ROOT}/subscriptions`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Authorization': getToken()\r\n    },\r\n    body: JSON.stringify({user_id: user_id, conversation_id: conversation_id})\r\n  }).then(resp => resp.json())\r\n}\r\n\r\nexport const postMessage = (messageObj, token) => {\r\n  console.log('API POST message: ', messageObj)\r\n  return fetch(`${API_ROOT}/messages`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Authorization': getToken()\r\n    },\r\n    body: JSON.stringify(messageObj)\r\n  })\r\n}\r\n\r\nexport const loginUser = (userLoginObj) => {\r\n  return fetch(`${API_ROOT}/login`, {\r\n    method: 'POST',\r\n    headers: HEADERS,\r\n    body: JSON.stringify(userLoginObj)\r\n  })\r\n  .then(res => res.json())\r\n}\r\n\r\nexport const createUser = (userSignupObj) => {\r\n  return fetch(`${API_ROOT}/users`, {\r\n    method: 'POST',\r\n    headers: HEADERS,\r\n    body: JSON.stringify(userSignupObj)\r\n  })\r\n  .then(res => res.json())\r\n}\r\n\r\nexport const getCurrentUser = (token) => {\r\n  return fetch(`${API_ROOT}/current_user`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Authorization': getToken()\r\n    },\r\n  }).then(res => res.json())\r\n}\r\n\r\nexport const createConversation = (id, conversationObj, token) => {\r\n  return fetch(`${API_ROOT}/${id}/conversations`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n      'Authorization': getToken()\r\n    },\r\n    body: JSON.stringify(conversationObj)\r\n  })\r\n}","import React from \"react\";\r\n\r\nconst validations = input => {\r\n  //console.log(input)\r\n\r\n  let errors = [];\r\n\r\n  if (!input) {\r\n    errors.push(\"*Input cannot be empty\");\r\n  }\r\n\r\n  // if (input && input.length < 2) {\r\n  //   errors.push(\"*a bit more effort?\");\r\n  // }\r\n\r\n  return errors;\r\n};\r\n\r\nexport default validations;","import React from \"react\";\r\nimport { postMessage } from \"../adapter/api\";\r\nimport validate from \"./validations\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport \"./emoji.css\";\r\n\r\nclass Emoji extends React.Component {\r\n  state = {\r\n    text: \"\",\r\n    conversation_id: this.props.conversation_id,\r\n    user_id: this.props.user_id,\r\n    showEmojis: false,\r\n    errors: []\r\n  };\r\n\r\n  showEmojis = e => {\r\n    this.setState(\r\n      {\r\n        showEmojis: true\r\n      },\r\n      () => document.addEventListener(\"click\", this.closeMenu)\r\n    );\r\n  };\r\n\r\n  closeMenu = e => {\r\n    console.log(this.emojiPicker);\r\n    if (this.emojiPicker !== null && !this.emojiPicker.contains(e.target)) {\r\n      this.setState(\r\n        {\r\n          showEmojis: false\r\n        },\r\n        () => document.removeEventListener(\"click\", this.closeMenu)\r\n      );\r\n    }\r\n  };\r\n\r\n  componentWillReceiveProps = nextProps => {\r\n    this.setState({\r\n      conversation_id: nextProps.conversation_id,\r\n      user_id: nextProps.user_id\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    let validation = validate(e.target.value);\r\n    //console.log(validation)\r\n    this.setState({\r\n      text: e.target.value,\r\n      errors: validation\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    let validation = validate(this.state.text);\r\n    //console.log(validation)\r\n    if (validation.length === 0) {\r\n      postMessage(this.state);\r\n      this.setState({ text: \"\" });\r\n    }\r\n    this.setState({\r\n      errors: validation\r\n    });\r\n  };\r\n\r\n  addEmoji = e => {\r\n    // console.log(e.native);\r\n    let emoji = e.native;\r\n    this.setState({\r\n      text: this.state.text + emoji\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let errors = this.state.errors.map(err => <p>{err}</p>);\r\n\r\n    return (\r\n      <div className=\"newMessageInput\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            style={styles.input}\r\n            type=\"text\"\r\n            value={this.state.text}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Type and hit ENTER\"\r\n          />\r\n        </form>\r\n        <div style={{ color: \"red\" }}>{errors}</div>\r\n        {this.state.showEmojis ? (\r\n          <span style={styles.emojiPicker} ref={el => (this.emojiPicker = el)}>\r\n            <Picker\r\n              onSelect={this.addEmoji}\r\n              emojiTooltip={true}\r\n              title=\"weChat\"\r\n            />\r\n          </span>\r\n        ) : (\r\n          <p style={styles.getEmojiButton} onClick={this.showEmojis}>\r\n            {String.fromCodePoint(0x1f60a)}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Emoji;\r\n\r\nconst styles = {\r\n  container: {\r\n    padding: 20,\r\n    borderTop: \"1px #4C758F solid\",\r\n    marginBottom: 20\r\n  },\r\n  form: {\r\n    display: \"flex\"\r\n  },\r\n  input: {\r\n    color: \"inherit\",\r\n    background: \"none\",\r\n    outline: \"none\",\r\n    border: \"none\",\r\n    flex: 1,\r\n    fontSize: 16\r\n  },\r\n  getEmojiButton: {\r\n    cssFloat: \"right\",\r\n    border: \"none\",\r\n    margin: 0,\r\n    cursor: \"pointer\"\r\n  },\r\n  emojiPicker: {\r\n    position: \"absolute\",\r\n    bottom: 10,\r\n    right: 0,\r\n    cssFloat: \"right\",\r\n    marginLeft: \"200px\"\r\n  }\r\n};\r\n\r\nconst customEmojis = [\r\n  {\r\n    name: \"Octocat\",\r\n    short_names: [\"octocat\"],\r\n    text: \"\",\r\n    emoticons: [],\r\n    keywords: [\"github\"],\r\n    imageUrl: \"https://assets-cdn.github.com/images/icons/emoji/octocat.png?v7\"\r\n  }\r\n];","import React from 'react';\nimport Token from '../Token';\nimport MessageView from './MessageView';\nimport { Image, InputGroup, FormControl, Spinner } from 'react-bootstrap';\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { Card, Row, Col, CardTitle, Parallax, Section} from \"react-materialize\";\nimport \"./Messages.css\";\nimport Emoji from './emoji'\n\n\nexport default class Message extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            anon: {\n                _id: \"???????\",\n                avatar: \"haha\"\n            },\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        const token = new Token();\n\n        if (token.token === null)\n        {\n            this.props.history.push(\"/\");\n            return;\n        }\n        this.login(token.token).then(() => this.getMessages());\n        //set interval\n    }\n\n    login(token) {\n        return fetch(`${window.location.origin.toString()}/api/anon/${token}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.length > 0 && data[0]._id === token) {\n                console.log(data);\n                this.setState({\n                    anon: data[0]\n                });\n                setInterval(function(){ this.getMessages(); }.bind(this), 3000);\n            } else {\n                const token = new Token();\n                token.saveToken(null);\n                this.props.history.push(\"/\");\n            }\n        }).catch(err => {\n            const token = new Token();\n            token.saveToken(null);\n            this.props.history.push(\"/\");\n        });\n    }\n\n    getMessages() {\n        return fetch(`${window.location.origin.toString()}/api/messages`)\n        .then(response => response.json())\n        .then(data => {\n            data = data.reverse();\n            console.log(data);\n            this.setState({\n                anon: this.state.anon,\n                messages: data,\n                loading: false\n            });\n        });\n    }\n\n    handleKeyPress(e) {\n        if (e.charCode !== 13) {\n            return;\n        }\n        const message = e.target.value;\n        e.target.value = \"\";\n        console.log(message);\n        return fetch(`${window.location.origin.toString()}/api/message`, {\n            method: 'POST',\n            body: JSON.stringify({\n                message: message,\n                anon: this.state.anon._id,\n                mood: this.state.anon.avatar\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(data => {\n            this.getMessages();\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    deleteMessage(id) {\n        return fetch(`${window.location.origin.toString()}/api/message/${id}/${this.state.anon._id}`, {\n            method: 'DELETE'\n        })\n        .then(response => response.json())\n        .then(data => {\n            this.getMessages();\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div>\n                <Spinner animation=\"grow\" variant=\"primary\" />\n                <Spinner animation=\"grow\" variant=\"secondary\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n                <Spinner animation=\"grow\" variant=\"info\" />\n                <Spinner animation=\"grow\" variant=\"light\" />\n                <Spinner animation=\"grow\" variant=\"dark\" />\n                </div>\n            );\n        }\n\n          \n        \n\n        const image = require(`../assets/images/emojis/${this.state.anon.avatar}.png`);\n        return (\n\n            <Row>\n                <Col m={12} s={12} l={12}>\n                <Card header={<CardTitle />} actions={[<a />]}>\n                        <Image src={image} roundedCircle />\n\n                                    \n                        <InputGroup onKeyPress={this.handleKeyPress.bind(this)} className=\"mb-3\">\n                            \n                            <InputGroup.Text>\n                            What's on your mind?\n                            </InputGroup.Text>\n                            \n                            <Emoji />\n                            \n                        </InputGroup>\n                    \n                </Card>\n                </Col>\n                \n                <Col m={12} s={12} l={12}>\n                {this.state.messages.map(message =>\n                    <MessageView message={message} deleteCallback={this.deleteMessage.bind(this)} owned={this.state.anon._id === message.anon} />\n                )}\n                </Col>\n                </Row>\n            \n        );\n    }\n}","import React from 'react'\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\nimport Home from './Home'\nimport Login from './Login'\nimport Messages from './Messages'\n\nconst Main = () => (\n  <main>\n    <BrowserRouter>\n    <Switch>\n      <Route exact path='/' component={Home}/>\n      <Route path='/login' component={Login}/>\n      <Route path='/messages' component={Messages}/>\n    </Switch>\n    </BrowserRouter>\n  </main>\n)\n\nexport default Main\n","//sets up the reusable Navbar component\nimport \"./navbar.scss\";\nimport React from \"react\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { Navbar, NavItem } from \"react-materialize\";\n\n\n\nfunction Navbarrender() {\n  return (\n<Navbar brand={<a />} alignLinks=\"right\" className=\"navbarcolor\">\n  <img src=\"https://i.pinimg.com/originals/20/c7/bc/20c7bcfe40f464961ed209e3deadf8b6.png\" className=\"navbarlogo\" height=\"100px\" width=\"100px\"></img>\n<NavItem href=\"components.html\" class=\"white-text\">\nLog Out\n</NavItem>\n</Navbar>\n  );\n}\n\nexport default Navbarrender;\n\n\n\n\n","/* eslint-disable no-undef */\n/* eslint-disable jsx-a11y/alt-text */\nimport \"./Jumbotron.css\";\nimport React from \"react\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport { Section, Button, Modal, trigger} from \"react-materialize\";\n\n\n\nfunction Parallaxrender() {\n\treturn (\n\n  <Section>\n\n  <Section className=\"parallax\">\n    <h1 className=\"title\">Shower Thoughts</h1>\n    </Section>\n  \n \n  </Section>\n\n\t)\n  }\n\nexport default Parallaxrender;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Blockquote.css';\n\n/**\n * Appears as a raised card with the content of a given quote as\n * well as the quote's author\n */\nconst Blockquote = props => {\n    const { author, children } = props;\n    return (\n        <div className=\"Blockquote\">\n            <blockquote className=\"Blockquote__quotation\">\n                {children}\n            </blockquote>\n            <span className=\"Blockquote__author\">&mdash; {author}</span>\n        </div>\n    );\n};\n\nexport default Blockquote;\n\nBlockquote.propTypes = {\n    /** Author of the quote inserted with the `children` prop */\n    author: PropTypes.string.isRequired,\n    /** Content for the blockquote */\n    children: PropTypes.any.isRequired,\n};\n","/**\n * Get a CSS class based on the name of the component and the desired\n * color/variant. Uses BEM naming convention.\n *\n * @param {string} component Name of the component for the modifiers\n * @param {string} color Lowercase string for the color modifier\n * @param {string} variant Lowercase string for the variant modifier, is added to the end of the color modifier\n */\nconst getDisplayClassName = (component, color, variant) => {\n    const transformedColor = color === 'default' ? 'grey' : color;\n    const colorClassName = `${component}--${transformedColor}`;\n\n    if (variant && variant !== 'default') return `${colorClassName}--${variant}`;\n    return colorClassName;\n};\n\nexport default getDisplayClassName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport getDisplayClassName from './getDisplayClassName';\nimport './Button.css';\n\n/**\n * Button that uses the HTML `<button>` element as its base. Allows for a \n * color and variant from a set list to be provided.\n */\nconst Button = props => {\n    const { buttonClasses, children, color, variant, ...rest } = props;\n    const buttonDisplayClassName = getDisplayClassName('Button', color, variant); // Get CSS class for color and variant of the button\n\n    return (\n        <button className={classnames('Button', buttonDisplayClassName, buttonClasses)} {...rest}>\n            <span className=\"Button__label\">{children}</span>\n        </button>\n    );\n};\n\nexport default Button;\n\nButton.propTypes = {\n    /** Extra CSS classes to attach to the HTML `<button>` */\n    buttonClasses: PropTypes.string,\n    /** Content for the button */\n    children: PropTypes.any.isRequired,\n    /** Different colors for a button */\n    color: PropTypes.oneOf(['default', 'primary']),\n    /** Different variations of a given color scheme for a button */\n    variant: PropTypes.oneOf(['default', 'contained']),\n};\n\nButton.defaultProps = {\n    buttonClasses: '',\n    color: 'default',\n    variant: 'default',\n};\n","/**\n * Generate a random string of alphanumeric characters that\n * can be used as part of a unique key or id\n *\n * @author Xuejia Chen <570171025@qq.com>\n *\n * @see {@link https://gist.github.com/6174/6062387} for original answer\n */\nconst generateRandomString = () => {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n\nexport default generateRandomString;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport generateRandomString from './generateRandomString';\nimport getDisplayClassName from './getDisplayClassName';\nimport './Tag.css';\n\n/**\n * Represents an attribute a quote can be labelled with. Allows for a \n * color and variant from a set list to be provided.\n */\nconst Tag = props => {\n    const { color, inputName, isChecked, tagClasses, text, variant } = props;\n    const checkboxId = `${inputName}_${generateRandomString()}`;\n    const tagDisplayClassName = getDisplayClassName('Tag', color, variant); // Get CSS class for color and variant of the tag\n\n    return (\n        <div className={classnames('Tag', tagDisplayClassName, tagClasses)}>\n            {isChecked ?\n            <input className=\"Tag__checkbox\" type=\"checkbox\" name={inputName} id={checkboxId} checked />\n            :\n            <input className=\"Tag__checkbox\" type=\"checkbox\" name={inputName} id={checkboxId} />}\n            <label className=\"Tag__button\" htmlFor={checkboxId}>\n                <span className=\"Tag__text\">\n                    {text}\n                </span>\n            </label>\n        </div>\n    );\n};\n\nexport default Tag;\n\nTag.propTypes = {\n    /** Color options for a tag */\n    color: PropTypes.oneOf(['default']),\n    /**\n     * Name for the checkbox HTML `<input />`, also used as part of an ID\n     * for the checkbox HTML `<input />`\n     */\n    inputName: PropTypes.string.isRequired,\n    /** Determines whether the checkbox is checked on page load */\n    isChecked: PropTypes.bool,\n    /** Extra CSS classes to attach to the containing HTML `<div>` */\n    tagClasses: PropTypes.string,\n    /** User-facing text for the tag */\n    text: PropTypes.string.isRequired,\n    /** Different variations of a given color scheme for a tag */\n    variant: PropTypes.oneOf(['default', 'outline']),\n};\n\nTag.defaultProps = {\n    color: 'default',\n    isChecked: false,\n    tagClasses: '',\n    variant: 'default',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport Tag from './Tag';\nimport generateRandomString from './generateRandomString';\nimport './Form.css';\n\n/**\n * Form that provides interface for users to generate quotes and/or filter quotes to\n * generate by tag.\n */\nconst Form = props => {\n    const {\n        submitButtonColor,\n        submitButtonText,\n        submitButtonVariant,\n        tagColor,\n        tags,\n        tagVariant,\n        ...rest } = props;\n\n    return (\n        <form {...rest}>\n            <Button\n                color={submitButtonColor}\n                type=\"submit\"\n                variant={submitButtonVariant}\n            >\n                {submitButtonText}\n            </Button>\n            {tags.length > 0 ?\n            <div className=\"Form__inline-input-container\">\n                {tags.map((tag) => {\n                    const tagInputName = tag.replace(/\\s/g, ''); // Eliminate any spaces within the tag label\n                    return (\n                        <Tag\n                            color={tagColor}\n                            inputName={tagInputName}\n                            key={`tag_${generateRandomString()}`}\n                            tagClasses=\"Form__inline-input-container__input\"\n                            text={tag}\n                            variant={tagVariant}\n                        />\n                    );\n                })}\n            </div> : ''\n            }\n        </form>\n    );\n};\n\nexport default Form;\n\nForm.propTypes = {\n    /** \n     * Color of the submit button. \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Button.jsx`\n     */\n    submitButtonColor: PropTypes.string,\n    /** Text for the submit button */\n    submitButtonText: PropTypes.string,\n    /** \n     * Variant of the submit button. \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Button.jsx`\n     */\n    submitButtonVariant: PropTypes.string,\n    /** \n     * Color for each tag (available when the `tags` prop has at least one value). \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Tag.jsx`\n     */\n    tagColor: PropTypes.string,\n    /** Array of tag labels */\n    tags: PropTypes.arrayOf(PropTypes.string),\n    /** \n     * Variant for each tag (available when the `tags` prop has at least one value). \n     * Must match one of the options in the `PropTypes.oneOf()` array in `Tag.jsx`\n     */\n    tagVariant: PropTypes.string,\n};\n\nForm.defaultProps = {\n    submitButtonColor: 'default',\n    submitButtonText: 'Submit',\n    submitButtonVariant: 'default',\n    tagColor: 'default',\n    tags: [],\n    tagVariant: 'default',\n};\n","import quotesData from '../data/quotes.json';\n\n/**\n * @classdesc Class with static methods for retrieving quotes, quote data, and tags.\n */\nclass QuoteService {\n    /**\n     * Filter for quotes labelled with tags selected by the user. Returns\n     * an array of quotes that contain at least one tag from the\n     * `selectedTags` array.\n     *\n     * @param {string[]} selectedTags List of tags selected by the user\n     */\n    static getQuotesBySelectedTags(selectedTags) {\n        if (selectedTags.length < 1) return quotesData; // Only filter results if any tags were selected\n\n        const filteredQuotes = [];\n\n        for (const quote of quotesData) {\n            for (const tag of quote.tags) {\n                if (selectedTags.indexOf(tag) > -1) { // Check if this tag matches one of the tags selected by the user\n                    filteredQuotes.push(quote); // If it does, push the `quote` into `filteredQuotes`\n                    break; // End the loop so the quote isn't added more than once\n                }\n            }\n        }\n\n        return filteredQuotes;\n    }\n\n    /**\n     * Returns a random number between `0` and the number of quotes to be picked from\n     * @param {number} quoteArrayLength Number of quotes that can be randomly picked from\n     */\n    static getRandomQuoteIndex(quoteArrayLength) {\n        return Math.floor(Math.random() * Math.floor(quoteArrayLength));\n    }\n\n    /**\n     * Returns an array of each unique instance of a tag from the source data\n     */\n    static getUniqueTags() {\n        const uniqueTags = [];\n\n        for (const quote of quotesData) {\n            for (const tag of quote.tags) {\n                if (uniqueTags.indexOf(tag) === -1) uniqueTags.push(tag); // Push tag into array if it isn't there already\n            }\n        }\n\n        return uniqueTags;\n    }\n}\n\nexport default QuoteService;\n","import React, { Component } from 'react';\r\nimport Blockquote from './Blockquote';\r\nimport Button from './Button';\r\nimport Form from './Form';\r\nimport QuoteService from './services/QuoteService';\r\nimport './quote.css';\r\n\r\nclass Quote extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentQuote: null,\r\n      tags: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ tags: QuoteService.getUniqueTags().sort() }); // Get the tags for the user to pick from, sorted alphabetically\r\n  }\r\n\r\n  /**\r\n   * Returns the submitted `formData` as an object\r\n   */\r\n  getFormDataObject = formData => {\r\n    const data = {};\r\n    for (const key of formData.keys()) {\r\n      data[key] = formData.get(key);\r\n    }\r\n    return data;\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({\r\n      currentQuote: null,\r\n    });\r\n  };\r\n  \r\n  handleSubmit = event => {\r\n    event.preventDefault(); // Prevent page from reloading\r\n    const data = this.getFormDataObject(new FormData(event.target));\r\n    const selectedTags = Object.keys(data);\r\n    const filteredQuotes = QuoteService.getQuotesBySelectedTags(selectedTags);\r\n    // Is either the single quote in `filteredQuotes` or a random quote if the length of `filteredQuotes` is larger than `1`\r\n    let randomQuote = filteredQuotes.length === 1 ? filteredQuotes[0] : filteredQuotes[QuoteService.getRandomQuoteIndex(filteredQuotes.length)];\r\n\r\n    this.setState({\r\n      currentQuote: {\r\n        author: randomQuote.author.name,\r\n        tags: randomQuote.tags,\r\n        text: randomQuote.text,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { currentQuote, tags } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {!currentQuote ?\r\n        <Form\r\n          className=\"container\"\r\n          onSubmit={this.handleSubmit}\r\n          submitButtonColor=\"primary\"\r\n          submitButtonText=\"Generate quote\"\r\n          submitButtonVariant=\"contained\"\r\n          tags={tags}\r\n          tagVariant=\"outline\"\r\n        /> : ''}\r\n        {currentQuote ?\r\n        <div className=\"container\">\r\n          <Button\r\n            buttonClasses=\"margin-bottom--sm\"\r\n            color=\"primary\"\r\n            onClick={this.handleReset}\r\n            type=\"reset\"\r\n          >\r\n            <span className=\"icon--lg margin-right--xs\">\r\n              &laquo;\r\n            </span>\r\n            Generate another\r\n          </Button>\r\n          <Blockquote author={currentQuote.author}>\r\n              {currentQuote.text}\r\n          </Blockquote>\r\n          {currentQuote.tags && currentQuote.tags.length > 0 ?\r\n          <React.Fragment>\r\n            <small className=\"color--grey font-size--sm margin-top--sm\">Tags for this quote:\r\n              {currentQuote.tags.map((tag, index) => {\r\n                // List tags for this quote, insert comma after each if not the last tag\r\n                return ` \"${tag}${(index + 1) !== currentQuote.tags.length ? '\", ' : '\"'}`;\r\n              })}\r\n            </small>\r\n          </React.Fragment> : ''}\r\n        </div> : ''}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from \"react\";\nimport M from \"materialize-css\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport \"./InspirationModal.css\";\nimport Quote from './quote';\n\n\n\nclass Modal extends Component {\n  componentDidMount() {\n    const options = {\n      onOpenStart: () => {\n        console.log(\"Open Start\");\n      },\n      onOpenEnd: () => {\n        console.log(\"Open End\");\n      },\n      onCloseStart: () => {\n        console.log(\"Close Start\");\n      },\n      onCloseEnd: () => {\n        console.log(\"Close End\");\n      },\n      inDuration: 250,\n      outDuration: 250,\n      opacity: 0.5,\n      dismissible: false,\n      startingTop: \"4%\",\n      endingTop: \"10%\"\n    };\n    M.Modal.init(this.Modal, options);\n    // If you want to work on instance of the Modal then you can use the below code snippet \n    // let instance = M.Modal.getInstance(this.Modal);\n    // instance.open();\n    // instance.close();\n    // instance.destroy();\n  }\n\n  render() {\n    return (\n      <>\n        <a\n          className=\"waves-effect waves-light btn modal-trigger inspirationModalBTN\"\n          data-target=\"modal1\"\n        >\n          NEED INSPIRATION?\n        </a>\n\n        <div\n          ref={Modal => {\n            this.Modal = Modal;\n          }}\n          id=\"modal1\"\n          className=\"modal\"\n        >\n          {/* If you want Bottom Sheet Modal then add \n        bottom-sheet class */}\n          <div className=\"modal-content\">\n            <h4>Generate a Quote Below!</h4>\n            <Quote />\n          </div>\n          <div class=\"modal-footer\">\n            <a href=\"#\" class=\"modal-close waves-effect waves-red btn-flat\">\n              Close\n            </a>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Modal;","import React from 'react'\nimport Main from './Main'\nimport Navbar from \"./Navbar\"\nimport Jumbotron from \"./Jumbotron\"\nimport InspirationModal from './InspirationModal'\n\n\nconst App = () => (\n  <div>\n    <Navbar\n        />\n    <Jumbotron\n        />\n    <InspirationModal\n        />\n    <Main />\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App';\n\nrender((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));","var map = {\n\t\"./grinning.png\": 53,\n\t\"./neutral.png\": 54,\n\t\"./rolling.png\": 55,\n\t\"./slightly.png\": 56,\n\t\"./sunglasses.png\": 57,\n\t\"./thinking.png\": 58\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;","module.exports = __webpack_public_path__ + \"static/media/grinning.a5c4c868.png\";","module.exports = __webpack_public_path__ + \"static/media/neutral.a7fe3123.png\";","module.exports = __webpack_public_path__ + \"static/media/rolling.8d0d9682.png\";","module.exports = __webpack_public_path__ + \"static/media/slightly.f8af4936.png\";","module.exports = __webpack_public_path__ + \"static/media/sunglasses.4238fe56.png\";","module.exports = __webpack_public_path__ + \"static/media/thinking.872be34d.png\";"],"sourceRoot":""}